// Generated by CoffeeScript 1.9.1
(function() {
  var ADDITIONS, Base, RESULT, _, isEmpty;

  _ = require('lodash');

  Base = require('./extend');

  RESULT = require('../result');

  isEmpty = function(obj) {
    if (_.isArray(obj) && obj.length === 0) {
      return true;
    }
    if (_.isPlainObject(obj)) {
      return true;
    }
    if (obj === '') {
      return true;
    }
    return false;
  };

  ADDITIONS = {
    $required: function(target, required, r) {
      if (required && _.isUndefined(target)) {
        return r.UNVALID;
      } else if (!required && _.isUndefined(target)) {
        return r.VALID;
      } else {
        return r.PASS;
      }
    },
    $empty: function(target, empty, r) {
      if (!empty && isEmpty(target)) {
        return r.UNVALID;
      } else if (empty && isEmpty(target)) {
        return r.VALID;
      } else {
        return r.PASS;
      }
    },
    $null: function(target, canNull, r) {
      var isNull;
      isNull = _.isNull(target) || (_.isString(target) && target.toLowerCase() === 'null');
      if (!canNull && isNull) {
        return r.UNVALID;
      } else if (canNull && isNull) {
        return r.VALID;
      } else {
        return r.PASS;
      }
    }
  };

  module.exports = new Base({
    Data: ADDITIONS,
    format: function(addition) {
      return Object.keys(this.Data).forEach(function(key) {
        return addition[key] = addition[key] || false;
      });
    },
    check: function(arr, addition) {
      var handler, key, rt, val;
      this.format(addition);
      for (key in addition) {
        val = addition[key];
        handler = this.get(key);
        if (!handler) {
          return false;
        }
        handler = _.partial(handler, _, val, RESULT);
        rt = _.reduce(_.map(arr, handler), function(a, b) {
          return a || b;
        });
        if (rt === RESULT.PASS) {
          continue;
        } else {
          return rt;
        }
      }
    }
  });

}).call(this);
