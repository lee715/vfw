// Generated by CoffeeScript 1.9.1
(function() {
  var Extend, _, argsWrap, isArray, isFunction, isObject, isString, ref;

  ref = _ = require('lodash'), isFunction = ref.isFunction, isString = ref.isString, isObject = ref.isObject, isArray = ref.isArray;

  argsWrap = require('../util').argsWrap;

  Extend = (function() {
    function Extend(opts) {
      var key, val;
      opts || (opts = {});
      for (key in opts) {
        val = opts[key];
        if (isFunction(val)) {
          this[key] = _.bind(val, this);
        } else {
          this[key] = val;
        }
      }
      this;
    }

    Extend.prototype.Data = {};

    Extend.prototype.THIRDS = [];

    Extend.prototype.has = function(key) {
      var i, len, ref1, third;
      if (this.Data[key]) {
        return !!this.Data[key];
      }
      ref1 = this.THIRDS;
      for (i = 0, len = ref1.length; i < len; i++) {
        third = ref1[i];
        if (third[key]) {
          return !!third[key];
        }
      }
      return false;
    };

    Extend.prototype.extend = argsWrap(function(key, fn) {
      if (!(isFunction(fn) && isString(key))) {
        return;
      }
      return this.Data[key] = fn;
    });

    Extend.prototype.get = function(key) {
      var i, len, ref1, third;
      if (this.Data[key]) {
        return this.Data[key];
      }
      ref1 = this.THIRDS;
      for (i = 0, len = ref1.length; i < len; i++) {
        third = ref1[i];
        if (third[key]) {
          return third[key];
        }
      }
      return null;
    };

    Extend.prototype.include = function(third) {
      if (!isObject(third)) {
        return;
      }
      return this.THIRDS.push(third);
    };

    Extend.prototype.getKeyFromStr = function(str) {
      var i, key, keys, len;
      keys = Object.keys(this.Data);
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        if (str.indexOf(key) === 0) {
          return key;
        }
      }
      return null;
    };

    return Extend;

  })();

  module.exports = Extend;

}).call(this);
