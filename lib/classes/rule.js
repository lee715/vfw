// Generated by CoffeeScript 1.10.0
(function() {
  var Extend, Rule, _, addition, logic, u;

  _ = require('lodash');

  u = require('../util');

  Extend = require('../extend');

  logic = require('../internal/logic');

  addition = require('../internal/addition');

  Rule = (function() {
    function Rule(opts) {
      opts || (opts = {});
      if (opts.path && _.isString(opts.path)) {
        opts.path = opts.path.split('.');
      }
      this._path = opts.path || [];
      this._rule = opts.rule;
      this._addition = opts.addition || {};
      this._hdl = opts.handler || null;
      this;
    }

    Rule.prototype.check = function(target) {
      var _addition, _rule, hasAddi, rt, tar;
      _addition = this._addition, _rule = this._rule;
      tar = u.resolvePath(this._path, target);
      this._target = tar;
      if (!this._isMulti) {
        tar = [tar];
      }
      hasAddi = Object.keys(_addition).length;
      if (hasAddi) {
        rt = addition.check(_addition, tar);
        if (rt !== addition.RESULT.PASS) {
          return !!rt;
        }
      }
      return this._hdl.check(this._rule, tar);
    };

    Rule.prototype.toJSON = function() {
      var data;
      data = {
        addition: this._addition,
        rule: this._rule,
        path: this._path
      };
      return data;
    };

    Rule.prototype.setHandler = function(handler, rule) {
      this._hdl = handler;
      return this._rule = rule;
    };

    Rule.prototype.addAdditions = function(arr) {
      if (!Array.isArray(arr)) {
        arr = [arr];
      }
      return arr.forEach((function(_this) {
        return function(key) {
          return _this._addition[key] = 1;
        };
      })(this));
    };

    Rule.prototype.clone = function(ind) {
      var opts;
      if (this._finished) {
        return null;
      }
      opts = {
        addition: _.clone(this._addition),
        rule: _.clone(this._rule),
        path: _.clone(this._path),
        handler: this._hdl
      };
      return new Rule(opts);
    };

    Rule.prototype.addPath = function(key, depth) {
      var lastKey;
      lastKey = _.last(this._path);
      if (!logic.has(lastKey)) {
        this._path.push("$and" + depth);
      }
      return this._path.push(key);
    };

    Rule.prototype.finish = function() {
      var _path, i, key, len, path, ref;
      if (this._finished) {
        return;
      }
      this._logicChain = [];
      _path = [];
      ref = this._path;
      for (i = 0, len = ref.length; i < len; i++) {
        path = ref[i];
        if (path === '$array') {
          _path.push(path);
        } else if (/^\$\w+$/.test(path)) {
          key = logic.getKeyFromStr(path);
          if (key) {
            this._logicChain.push(key);
          } else {
            this._addition[path.replace('$', '')] = 1;
          }
        } else {
          _path.push(path);
        }
      }
      this._path = _path.join('.');
      this._isMulti = ~_path.indexOf('$array');
      this._finished = true;
      return this;
    };

    return Rule;

  })();

  module.exports = Rule;

}).call(this);
