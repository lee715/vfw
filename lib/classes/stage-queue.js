// Generated by CoffeeScript 1.9.1
(function() {
  var StageQueue;

  StageQueue = (function() {
    function StageQueue(stages, opts) {
      var _map, _orders;
      opts || (opts = {});
      stages || (stages = []);
      _orders = this._orders = stages.map(function(stage) {
        return stage.name;
      });
      _map = this._map = {};
      _orders.forEach(function(name) {
        return _map[name] = opts[name];
      });
    }

    StageQueue.prototype.addStage = function(stage, nextStage) {
      var _map, _orders, ind;
      _orders = this._orders, _map = this._map;
      if (!nextStage) {
        _orders.push(stage.name);
      } else {
        ind = _orders.indexOf(nextStage);
        if (~ind) {
          _orders.splice(ind, -1, stage.name);
        } else {
          _orders.push(stage.name);
        }
      }
      return _map[stage.name] = stage;
    };

    StageQueue.prototype.addRuleType = function(ruleType, stage) {
      if (!(stage && this._map[stage])) {
        return null;
      }
      return this._map[stage].add(ruleType);
    };

    StageQueue.prototype.remove = function(stage) {
      var _map, _orders, ind;
      if (!stage) {
        return;
      }
      _orders = this._orders, _map = this._map;
      ind = _orders.indexOf(stage);
      if (~ind) {
        _orders.splice(ind, 1);
        return delete _map[stage];
      }
    };

    StageQueue.prototype.start = function() {
      var _ctx, _data, _stages, i, len, stage;
      _stages = this._stages, _data = this._data, _ctx = this._ctx;
      for (i = 0, len = _stages.length; i < len; i++) {
        stage = _stages[i];
        if (!_data[stage].apply(_ctx, arguments)) {
          return stage;
        }
      }
    };

    StageQueue.prototype.getHandler = function(data, stages) {
      var handler, i, len, stage;
      stages || (stages = this._names);
      if (!Array.isArray(stages)) {
        stages = [stages];
      }
      for (i = 0, len = stages.length; i < len; i++) {
        stage = stages[i];
        handler = this._map[stage].canHandle(data);
        if (handler) {
          return handler;
        }
      }
      return null;
    };

    StageQueue.prototype.getHandlerByKey = function(key, stages) {
      var data, handler, i, len, stage;
      stages || (stages = this._names);
      if (!Array.isArray(stages)) {
        stages = [stages];
      }
      data = {};
      data[key] = 1;
      for (i = 0, len = stages.length; i < len; i++) {
        stage = stages[i];
        handler = this._map[stage].canHandle(data);
        if (handler) {
          return handler;
        }
      }
      return null;
    };

    StageQueue.prototype.isRuleWithPrecheck = function(keys) {
      var handler, hasCheckRule, i, key, len, stagesBeforeCheck;
      hasCheckRule = false;
      stagesBeforeCheck = this._name.slice(0, this._name.indexOf('check') + 1);
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        handler = this.getHandler(key, stagesBeforeCheck);
        if (!handler) {
          return false;
        }
        if (handler.getStage() === 'check') {
          if (hasCheckRule) {
            return false;
          }
          hasCheckRule = true;
        }
      }
      return hasCheckRule;
    };

    return StageQueue;

  })();

}).call(this);
