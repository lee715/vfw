// Generated by CoffeeScript 1.10.0
(function() {
  var RuleType, _, u;

  _ = require('lodash');

  u = require('../util');

  RuleType = (function() {
    RuleType.prototype.name = 'ruleType';

    function RuleType(opts) {
      opts || (opts = {});
      _.assign(this, opts);
      this.INCLUDES || (this.INCLUDES = []);
      this.DATA || (this.DATA = {});
      this;
    }

    RuleType.prototype.has = function(rule) {
      var DATA, INCLUDES, i, include, len;
      DATA = this.DATA, INCLUDES = this.INCLUDES;
      if (!rule) {
        return false;
      }
      if (DATA[rule]) {
        return true;
      }
      for (i = 0, len = INCLUDES.length; i < len; i++) {
        include = INCLUDES[i];
        if (include[rule]) {
          return true;
        }
      }
      return false;
    };

    RuleType.prototype.extend = u.argsWrap(function(key, val) {
      return this.DATA[key] = val;
    });

    RuleType.prototype.canHandle = function(rule) {
      throw new Error('canHandle api need rewrite');
    };

    RuleType.prototype.check = function(rule, arr) {
      var handler;
      if (!Array.isArray(arr)) {
        arr = [arr];
      }
      handler = this.get(rule);
      if (!handler) {
        return false;
      }
      return _.reduce(_.map(arr, handler), function(a, b) {
        return a && b;
      });
    };

    RuleType.prototype.get = function(rule) {
      var DATA, INCLUDES, i, include, len;
      DATA = this.DATA, INCLUDES = this.INCLUDES;
      if (!rule) {
        return null;
      }
      if (DATA[rule]) {
        return DATA[rule];
      }
      for (i = 0, len = INCLUDES.length; i < len; i++) {
        include = INCLUDES[i];
        if (include[rule]) {
          return include[rule];
        }
      }
      return null;
    };

    RuleType.prototype.include = function(third) {
      if (_.isObject(third)) {
        return this.INCLUDES.push(third);
      }
    };

    RuleType.prototype.formatKey = function(key) {
      if (key.charAt(0) !== '$') {
        return '$' + key;
      }
      return key;
    };

    return RuleType;

  })();

  module.exports = RuleType;

}).call(this);
