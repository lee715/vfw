// Generated by CoffeeScript 1.9.1
(function() {
  var LeafNode, LogicTree, TreeNode, _, logic;

  logic = require('./extends/logic');

  _ = require('lodash');

  LeafNode = (function() {
    function LeafNode(name) {
      this.name = name;
      this._val = null;
      this;
    }

    LeafNode.prototype.resolve = function() {
      return this.val();
    };

    LeafNode.prototype.val = function(value) {
      if (arguments.length) {
        return this._val = value;
      } else {
        return this._val;
      }
    };

    return LeafNode;

  })();

  TreeNode = (function() {
    function TreeNode(name, val) {
      var key, op;
      this.name = name;
      if (name === 'root') {
        key = '$and';
      } else {
        key = logic.getKeyFromStr(name);
      }
      op = logic.get(key);
      if (!op) {
        throw new Error("unvalid operation: " + key);
      }
      this._op = op;
      this._val = val = val || [];
      this._map = {};
      val.forEach((function(_this) {
        return function(v) {
          return _this._map[v.name] = v;
        };
      })(this));
      this;
    }

    TreeNode.prototype.resolve = function() {
      var _val, res;
      _val = this._val;
      res = this._op.apply(null, _.map(_val, function(val) {
        return val.resolve();
      }));
      this.status = res;
      return res;
    };

    TreeNode.prototype.addChildNode = function(child) {
      var _val;
      _val = this._val;
      _val.push(child);
      this._map[child.name] = child;
      return child._parent = this;
    };

    TreeNode.prototype.getChild = function(name) {
      return this._map[name];
    };

    return TreeNode;

  })();

  LogicTree = (function() {
    function LogicTree() {
      this._root = new TreeNode('root');
      this._leafMap = {};
    }

    LogicTree.prototype.initByChain = function(chain, leafName) {
      var _node, i, leaf, len, name, node;
      node = this._root;
      for (i = 0, len = chain.length; i < len; i++) {
        name = chain[i];
        _node = node.getChild(name);
        if (_node) {
          node = _node;
        } else {
          _node = new TreeNode(name);
          node.addChildNode(_node);
          node = _node;
        }
      }
      leaf = new LeafNode(leafName);
      this._leafMap[leaf.name] = leaf;
      return node.addChildNode(leaf);
    };

    LogicTree.prototype.findErrorLeafs = function() {
      var _leafMap, errLeafs;
      _leafMap = this._leafMap;
      errLeafs = [];
      Object.keys(_leafMap).forEach(function(name) {
        var leaf, node;
        leaf = _leafMap[name];
        if (!leaf.val()) {
          node = leaf._parent;
          while (node && !node.status) {
            if (node.name === 'root') {
              break;
            }
            node = node._parent;
          }
          if (node.name === 'root') {
            return errLeafs.push(leaf.name);
          }
        }
      });
      return errLeafs;
    };

    LogicTree.prototype.resolve = function(valObj) {
      var key, leaf, val;
      for (key in valObj) {
        val = valObj[key];
        leaf = this._leafMap[key];
        if (leaf) {
          leaf.val(val);
        }
      }
      return this._root.resolve();
    };

    return LogicTree;

  })();

  module.exports = LogicTree;

}).call(this);
