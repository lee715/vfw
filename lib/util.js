// Generated by CoffeeScript 1.10.0
(function() {
  var _, isObject, mapKeys, ref;

  ref = _ = require('lodash'), isObject = ref.isObject, mapKeys = ref.mapKeys;

  module.exports = {
    startWithDollar: function(str) {
      if (typeof str !== 'string') {
        return false;
      }
      return /^\$/.test(str);
    },
    slice: function(args, pos, end) {
      var arr, i, j, len, ref1, ref2;
      if (pos == null) {
        pos = 0;
      }
      arr = [];
      len = args.length;
      end || (end = len - 1);
      for (i = j = ref1 = pos, ref2 = end; ref1 <= ref2 ? j <= ref2 : j >= ref2; i = ref1 <= ref2 ? ++j : --j) {
        arr.push(args[i]);
      }
      return arr;
    },
    argsWrap: function(fn) {
      return function(key, val) {
        var self;
        self = this;
        if (isObject(key)) {
          return mapKeys(key, function(val, key) {
            return fn.call(self, key, val);
          });
        } else {
          return fn.call(self, key, val);
        }
      };
    },
    reduceWrap: function(fn) {
      return function() {
        var args;
        args = u.slice(arguments);
        return _.reduce(args, fn);
      };
    },
    resolvePath: function(path, obj) {
      var curriedResult, max, pis, rt;
      if (!(obj && path)) {
        return obj;
      }
      if (~path.indexOf('$array')) {
        pis = path.split(/^\$array\.|\$array|\.\$array$/);
        rt = obj;
        curriedResult = _.curryRight(_.result)(void 0);
        max = pis.length - 1;
        pis.forEach(function(p, ind) {
          p = p.replace(/^\.+|\.+$/g, '');
          if (p === '' && ind <= max) {
            return rt = [].concat.apply([], rt);
          } else {
            if (_.isArray(rt)) {
              rt = _.map(rt, function(r) {
                return curriedResult(p)(r);
              });
              if (ind < max) {
                return rt = [].concat.apply([], rt);
              }
            } else if (_.isObject(rt)) {
              return rt = _.result(rt, p);
            }
          }
        });
        return rt;
      } else {
        return _.result(obj, path);
      }
    }
  };

}).call(this);
