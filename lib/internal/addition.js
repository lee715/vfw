// Generated by CoffeeScript 1.10.0
(function() {
  var RuleType, _, isEmpty;

  RuleType = require('../classes/ruletype');

  _ = require('lodash');

  isEmpty = function(obj) {
    if (_.isArray(obj) && obj.length === 0) {
      return true;
    }
    if (_.isPlainObject(obj)) {
      return true;
    }
    if (obj === '') {
      return true;
    }
    return false;
  };

  module.exports = new RuleType({
    RESULT: {
      VALID: 2,
      UNVALID: 0,
      PASS: 1
    },
    DATA: {
      $required: function(target, required, r) {
        if (required && _.isUndefined(target)) {
          return r.UNVALID;
        } else if (!required && _.isUndefined(target)) {
          return r.VALID;
        } else {
          return r.PASS;
        }
      },
      $empty: function(target, empty, r) {
        if (!empty && isEmpty(target)) {
          return r.UNVALID;
        } else if (empty && isEmpty(target)) {
          return r.VALID;
        } else {
          return r.PASS;
        }
      },
      $null: function(target, canNull, r) {
        var isNull;
        isNull = _.isNull(target) || (_.isString(target) && target.toLowerCase() === 'null');
        if (!canNull && isNull) {
          return r.UNVALID;
        } else if (canNull && isNull) {
          return r.VALID;
        } else {
          return r.PASS;
        }
      }
    },
    format: function(preObj) {
      var _preObj;
      _preObj = {};
      Object.keys(this.DATA).forEach((function(_this) {
        return function(key) {
          return _preObj[key] = preObj[key] || false;
        };
      })(this));
      return _preObj;
    },
    check: function(preObj, arr) {
      var _preObj, handler, key, rt, val;
      if (!Array.isArray(arr)) {
        arr = [arr];
      }
      _preObj = this.format(preObj);
      for (key in _preObj) {
        val = _preObj[key];
        handler = this.get(key);
        if (!handler) {
          return false;
        }
        handler = _.partial(handler, _, val, this.RESULT);
        rt = _.reduce(_.map(arr, handler), function(a, b) {
          return a || b;
        });
        if (rt === this.RESULT.PASS) {
          continue;
        } else {
          return rt;
        }
      }
      return this.RESULT.PASS;
    },
    name: 'addition'
  });

}).call(this);
