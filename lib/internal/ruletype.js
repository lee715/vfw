// Generated by CoffeeScript 1.10.0
(function() {
  var Expression, Extender, Fn, Type, _,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  Extender = require('../extend');

  Type = Extender.extend({
    canHandle: function(rule) {
      if (!_.isString(rule)) {
        return false;
      }
      return /^[0-9a-zA-Z]+$/.test(rule);
    },
    name: 'type'
  });

  Expression = Extender.extend({
    DATA: {
      $in: function(target, arr) {
        return indexOf.call(arr, target) >= 0;
      },
      $eq: _.isEqual,
      $neq: function() {
        return !_.isEqual.apply(_, arguments);
      }
    },
    canHandle: function(rule) {
      var keys;
      if (!_.isPlainObject(rule)) {
        return false;
      }
      keys = Object.keys(rule);
      if (keys.length !== 1) {
        return false;
      }
      return this.has(rule);
    },
    get: function(rule) {
      var DATA, handler, key, val;
      DATA = this.DATA;
      for (key in rule) {
        val = rule[key];
        handler = DATA[key];
        if (!handler) {
          return null;
        }
        return _.partial(handler, _, val);
      }
    },
    has: function(rule) {
      var DATA, key, val;
      DATA = this.DATA;
      for (key in rule) {
        val = rule[key];
        return !!DATA[key];
      }
    },
    name: 'expression'
  });

  Fn = Extender.extend({
    canHandle: function(rule) {
      return _.isFunction(rule);
    },
    check: function(rule, arr) {
      if (!Array.isArray(arr)) {
        arr = [arr];
      }
      return _.reduce(_.map(arr, rule), function(a, b) {
        return a && b;
      });
    },
    name: 'function'
  });

}).call(this);
