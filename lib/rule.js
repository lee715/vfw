// Generated by CoffeeScript 1.9.1
(function() {
  var Extends, PASS, Rule, UNVALID, VALID, _, r, ref, u;

  _ = require('lodash');

  u = require('./util');

  Extends = require('./extends');

  ref = r = require('./result'), VALID = ref.VALID, UNVALID = ref.UNVALID, PASS = ref.PASS;

  Rule = (function() {
    function Rule(rule, addition, path) {
      if (addition) {
        Object.keys(addition).forEach(function(addi) {
          if (!Extends.addition.has(addi)) {
            throw Error("unrecognized addition: " + addi);
          }
        });
      }
      if (_.isString(rule)) {
        this._type = "type";
        if (!Extends.type.has(rule)) {
          throw new Error("unrecognized type: " + rule);
        }
      } else if (_.isFunction(rule)) {
        this._type = "function";
      } else if (_.isPlainObject(rule)) {
        this._type = "operation";
      } else {
        throw new Error("unrecognized rule");
      }
      this._path = path;
      this._isMulti = ~path.indexOf('$array');
      this._rule = rule;
      this._addition = addition || {};
      this;
    }

    Rule.prototype.check = function(target) {
      var _addition, _rule, _type, res, tar;
      _type = this._type, _addition = this._addition, _rule = this._rule;
      this._target = target;
      tar = u.resolvePath(this._path, target);
      if (!this._isMulti) {
        tar = [tar];
      }
      if (_type === 'type') {
        res = Extends.addition.check(tar, _addition);
        if (res === VALID) {
          return true;
        }
        if (res === UNVALID) {
          this._errType = 'addition';
          return false;
        }
      }
      if (_type === 'function') {
        return _.reduce(_.map(tar, _rule), function(a, b) {
          return a && b;
        });
      }
      return Extends[_type].check(tar, _rule);
    };

    Rule.prototype.toJSON = function() {
      var data;
      data = {
        err: this._errType || this._type,
        addition: this._addition,
        rule: this._rule,
        path: this._path
      };
      return data;
    };

    return Rule;

  })();

  module.exports = Rule;

}).call(this);
